package com.company;

import java.util.Scanner;

public class Main {

   
    private static boolean make_Triangle(String[] crops, int r, int c) {
        return (r + 1 < crops.length && crops[r].charAt(c) == crops[r + 1].charAt(c)) &&
                (c + 1 < crops[0].length() && crops[r].charAt(col) == crops[r].charAt(c + 1));
    }

    private static char getPossibleChar(String[] crops, int r, int c) {
        for (char ch = 'a'; ch <= 'z'; ch++) {
            if (check(crops, ch, r, c)) return ch;
        }
        return 'z';
    } 
    private static boolean make_Triangle(String[] crops, int r, int c) {
        return (r + 1 < crops.length && crops[r].charAt(c) == crops[r + 1].charAt(c)) &&
                (c + 1 < crops[0].length() && crops[r].charAt(col) == crops[r].charAt(c + 1));
    }


    private static boolean creating_Problem(String[] crops, int r, int c) {
        boolean up = false, left = false;
        if (r - 1 >= 0) left = (crops[r].charAt(c) == crops[r - 1].charAt(c));
        if (c - 1 >= 0) up = (crops[r].charAt(c) == crops[r].charAt(c - 1));
        return up || left;
    }
    private static boolean check(String[] crops, char ch, int r, int c) {
        boolean up = true, bottom = true, right = true, left = true;
        if (r - 1 >= 0) left = ch != crops[r - 1].charAt(c);
        if (c - 1 >= 0) up = ch != crops[r].charAt(c - 1);
        if (r + 1 < crops.length) bottom = ch != crops[r + 1].charAt(c);
        if (c + 1 < crops[0].length()) right = ch != crops[r].charAt(c + 1);
        return up && bottom && right && left;
    }
    public static void main(String[] args) {
        int N;
        Scanner in  = new Scanner(System.in);
        N = in.nextInt();
        in.nextLine();
        String[] crops = new String[N];
        for (int i = 0; i < N; i++) {
            crops[i] = in.nextLine().trim();
        }
        String[] crops1 = new String[N];
        if (N >= 0) System.arraycopy(crops, 0, crops1, 0, N);
        int count = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < crops[0].length(); j++) {
                if (creating_Problem(crops, i, j)) {
                    crops[i] = crops[i].substring(0, j) + getPossibleChar(crops, i, j) + crops[i].substring(j + 1);
                    count++;
                }
            }
        }
        int count1 = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < crops1[0].length(); j++) {
                if (make_Triangle(crops1, i, j) || creating_problem(crops1, i, j)) {
                    crops1[i] = crops1[i].substring(0, j) + getPossibleChar(crops1, i, j) + crops1[i].substring(j + 1);
                    count1++;
                }
            }
        }
        System.out.println(Math.min(count, count1));
    }
}
